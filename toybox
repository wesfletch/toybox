#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace # debug


USERNAME="${USER:-ubuntu}"
CONTAINER_IMG="toybox"
CONTAINER_NAME=""
COMMAND="run_container"
DUMP=0


function dont_run_in_container()
{
    if [[ -f "/.dockerenv" ]]; then
        echo "Don't run this script inside a docker container, man"
        exit 1
    fi
}

function build_container()
{
    echo "--- Building ${CONTAINER_IMG:?} image ---"
    docker build \
        --tag "${CONTAINER_IMG:?}:latest" \
        --build-arg USER="${USERNAME}" \
        --build-arg UID="${UID}" \
        .
}

function run_container()
{
    args=(
        -it
        --rm
        --user "${USERNAME}"
        --volume "${PWD}:/home/${USERNAME}/toybox"
        --volume "/tmp/.X11-unix:/tmp/.X11-unix"
        --workdir "/home/${USERNAME}/toybox"
        -e DISPLAY
        -e "TERM=xterm-256color"
    )
    if [[ -n "${CONTAINER_NAME:-}" ]]; then
        args+=(--name "${CONTAINER_NAME}")
    fi

    if [[ "${DUMP}" == 1 ]]; then
        echo "docker run ${args[*]}"
        return 0
    fi

    # Exec
    docker run "${args[@]}" "${CONTAINER_IMG:?}":latest
}


while [[ "${#}" -gt 0 ]]; do
    ARG="${1}"
    case "${ARG}" in
        # Verbs
        "build")
            COMMAND="build_container"
            ;;
        "run")
            COMMAND="run_container"
            ;;
        # Options
        "-i" | "--image")
            CONTAINER_IMG="${2}"
            shift
            ;;
        "-n" | "--name")
            CONTAINER_NAME="${2}"
            shift
            ;;
        "--dump" | "--dump-command")
            DUMP=1
            ;;
        # Default
        *)
            echo "What? ${ARG}"
            exit 1
    esac
    shift
done

# Doing this stuff INSIDE the toybox container doesn't make sense, 
# and yet I keep accidentally doing it...
dont_run_in_container

"${COMMAND}"